//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Source/Input/DefaultControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @DefaultControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @DefaultControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""DefaultControls"",
    ""maps"": [
        {
            ""name"": ""DefaultActionMap"",
            ""id"": ""22b83292-5659-462f-8604-3abe2c1d9915"",
            ""actions"": [
                {
                    ""name"": ""LeftMouseButtonPress"",
                    ""type"": ""Button"",
                    ""id"": ""743150e6-73bd-4d02-b80d-65940503c1dc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseX"",
                    ""type"": ""Value"",
                    ""id"": ""6b8ca104-5bd6-4511-8015-c595766b2d75"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f2b33c34-10f6-42df-bf81-32e96fe482b5"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": ""MouseAndKeyboard"",
                    ""action"": ""LeftMouseButtonPress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ed035bc4-7690-48d0-b300-65023bc149cf"",
                    ""path"": ""<Mouse>/delta/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MouseAndKeyboard"",
                    ""action"": ""MouseX"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""MouseAndKeyboard"",
            ""bindingGroup"": ""MouseAndKeyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // DefaultActionMap
        m_DefaultActionMap = asset.FindActionMap("DefaultActionMap", throwIfNotFound: true);
        m_DefaultActionMap_LeftMouseButtonPress = m_DefaultActionMap.FindAction("LeftMouseButtonPress", throwIfNotFound: true);
        m_DefaultActionMap_MouseX = m_DefaultActionMap.FindAction("MouseX", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // DefaultActionMap
    private readonly InputActionMap m_DefaultActionMap;
    private List<IDefaultActionMapActions> m_DefaultActionMapActionsCallbackInterfaces = new List<IDefaultActionMapActions>();
    private readonly InputAction m_DefaultActionMap_LeftMouseButtonPress;
    private readonly InputAction m_DefaultActionMap_MouseX;
    public struct DefaultActionMapActions
    {
        private @DefaultControls m_Wrapper;
        public DefaultActionMapActions(@DefaultControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @LeftMouseButtonPress => m_Wrapper.m_DefaultActionMap_LeftMouseButtonPress;
        public InputAction @MouseX => m_Wrapper.m_DefaultActionMap_MouseX;
        public InputActionMap Get() { return m_Wrapper.m_DefaultActionMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DefaultActionMapActions set) { return set.Get(); }
        public void AddCallbacks(IDefaultActionMapActions instance)
        {
            if (instance == null || m_Wrapper.m_DefaultActionMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DefaultActionMapActionsCallbackInterfaces.Add(instance);
            @LeftMouseButtonPress.started += instance.OnLeftMouseButtonPress;
            @LeftMouseButtonPress.performed += instance.OnLeftMouseButtonPress;
            @LeftMouseButtonPress.canceled += instance.OnLeftMouseButtonPress;
            @MouseX.started += instance.OnMouseX;
            @MouseX.performed += instance.OnMouseX;
            @MouseX.canceled += instance.OnMouseX;
        }

        private void UnregisterCallbacks(IDefaultActionMapActions instance)
        {
            @LeftMouseButtonPress.started -= instance.OnLeftMouseButtonPress;
            @LeftMouseButtonPress.performed -= instance.OnLeftMouseButtonPress;
            @LeftMouseButtonPress.canceled -= instance.OnLeftMouseButtonPress;
            @MouseX.started -= instance.OnMouseX;
            @MouseX.performed -= instance.OnMouseX;
            @MouseX.canceled -= instance.OnMouseX;
        }

        public void RemoveCallbacks(IDefaultActionMapActions instance)
        {
            if (m_Wrapper.m_DefaultActionMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDefaultActionMapActions instance)
        {
            foreach (var item in m_Wrapper.m_DefaultActionMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DefaultActionMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DefaultActionMapActions @DefaultActionMap => new DefaultActionMapActions(this);
    private int m_MouseAndKeyboardSchemeIndex = -1;
    public InputControlScheme MouseAndKeyboardScheme
    {
        get
        {
            if (m_MouseAndKeyboardSchemeIndex == -1) m_MouseAndKeyboardSchemeIndex = asset.FindControlSchemeIndex("MouseAndKeyboard");
            return asset.controlSchemes[m_MouseAndKeyboardSchemeIndex];
        }
    }
    public interface IDefaultActionMapActions
    {
        void OnLeftMouseButtonPress(InputAction.CallbackContext context);
        void OnMouseX(InputAction.CallbackContext context);
    }
}
